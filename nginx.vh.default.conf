
#
# Generated /etc/nginx/sites-available/default
#
lua_package_path '/etc/nginx/lua/?.lua;';


server {
    listen       9000;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;
    #resolver 8.8.8.8;  # use Google's open DNS server for an example
    resolver 10.220.0.2;

    location /checker {

    return 200;
    }

    location /lua_file {

          lua_code_cache off; #enables livereload for development
          content_by_lua_file /etc/nginx/lua/hello_world.lua;

    }
    location /print {
       lua_code_cache off; #enables livereload for development
       content_by_lua_file /etc/nginx/lua/print.lua;

       # content_by_lua '

       #    if ngx.req.get_method() == "POST" then
       #      local cjson = require("cjson")
       #      ngx.req.read_body()
       #      local text = ngx.var.request_body
       #      local spec = cjson.new().decode(text)

       #      local movie = spec["movie"]
       #      if movie == "true" then
       #           ngx.req.set_uri("/simple",true)
       #      end

       #      ngx.say(movie)
       #      
       #    end
       #    
       # ';
     }   
    location /printmulti {
        content_by_lua '

             ngx.req.read_body()
             local text = ngx.var.request_body
             local h = ngx.req.get_headers()
             for k, v in pairs(h) do
               ngx.say(k, ": ", v)
              end

             ngx.say(text)

             return
        ';
    }

    location /simple {

        content_by_lua '

          -- For simple singleshot requests, use the URI interface.
          local http = require "resty.http"
          local cjson = require "cjson"

          local httpc = http.new()
          -- local res, err = httpc:request_uri("http://api3.geo.admin.ch/rest/services/api/MapServer/ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill", {
          local res, err = httpc:request_uri("http://api3.geo.admin.ch/rest/services/api/MapServer/ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill", {
            method = "GET",
            headers = { 
              ["Content-Type"] = "application/json",
            }
          })

          if not res then
            ngx.say("lua failed to request: ", err)
            return
          end

          -- In this simple form, there is no manual connection step, so the body is read
          -- all in one go, including any trailers, and the connection closed or keptalive
          -- for you.
          local json = cjson.decode(res.body)
          local name = json["name"]

          ngx.status = res.status

          for k,v in pairs(res.headers) do
              ngx.say(k..":"..v)
          end
          ngx.say(name)
          ngx.say(cjson.encode(json["fields"]))
          -- ngx.say(res.body)
        ';
     }   
    location / {
        #root   /usr/share/nginx/html;
        #index  index.html index.htm;

        default_type text/html;
        content_by_lua '
            ngx.say("<p>hello world! -- saying by another lua try</p>")
        ';
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

